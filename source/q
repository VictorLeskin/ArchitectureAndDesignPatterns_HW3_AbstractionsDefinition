#include <gtest/gtest.h>

#include "AbstractionsDefinition.hpp"

// clang-format off

// gTest grouping class
class test_cVector : public ::testing::Test
{
public:
  // additional class to access to member of tested class
  class Test_cVector : public cVector
  {
  public:
    // add here members for free access.
    using cVector::cVector; // delegate constructors
  };

};

// gTest grouping class
class test_cRotate : public ::testing::Test
{
public:
    // additional class to access to member of tested class
    class Test_cRotate : public cRotate
    {
    public:
        // add here members for free access.
        using cRotate::cRotate; // delegate constructors
    };

    // additional class to access to member of tested class
    class Test_cRotatable : public cRotatable
    {
    public:
        // add here members for free access.
        using cRotatable::cRotatable; // delegate constructors
    };

    // additional class to access to member of tested class
    class Test_cRotatableThrowExceptions : public cRotatable
    {
    public:
        bool getDirection_throwsException = false;
        bool getAngularVelocity_throwsException = false;
        bool setDirection_throwsException = false;

    public:
        // add here members for free access.
        using cRotatable::cRotatable; // delegate constructors

        const cVector& Direction() const  { if( true == getDirection_throwsException ) throw cException( "getDirection throw me"); return position; }
        const cVector& AngularVelocity() const  { if( true == getAngularVelocity_throwsException ) throw cException( "getAngularVelocity throw me"); return velocity; }
        void Direction(const cVector& pos) { if( true == setDirection_throwsException ) throw cException( "setDirection throw me"); position = pos; }
        void AngularVelocity(const cVector& vel) { velocity = vel; }

    };

};

TEST_F(test_cRotate, test_RegularRotating )
{
    Test_cRotatable t0(cVector(12, 5), cVector(-7, 3));
    Test_cRotate t(t0);

    t.Execute();
    EXPECT_EQ( cVector(5,8), t0.Direction());
}

TEST_F(test_cRotate, test_getDirection_throwsException)
{
    Test_cRotatableThrowExceptions t0(cVector(12, 5), cVector(-7, 3));
    t0.getDirection_throwsException = true;

    Test_cRotate t(t0);

    try
    {
        t.Execute();
    }
    catch (const std::exception& expected)
    {
        ASSERT_STREQ("getDirection throw me", expected.what());
    }
}

TEST_F(test_cRotate, test_getAngularVelocity_throwsException)
{
    Test_cRotatableThrowExceptions t0(cVector(12, 5), cVector(-7, 3));
    t0.getAngularVelocity_throwsException = true;

    Test_cRotate t(t0);

    try
    {
        t.Execute();
    }
    catch (const std::exception& expected)
    {
        ASSERT_STREQ("getAngularVelocity throw me", expected.what());
    }
}

TEST_F(test_cRotate, test_setDirection_throwsException)
{
    Test_cRotatableThrowExceptions t0(cVector(12, 5), cVector(-7, 3));
    t0.setDirection_throwsException = true;

    Test_cRotate t(t0);

    try
    {
        t.Execute();
    }
    catch (const std::exception& expected)
    {
        ASSERT_STREQ("setDirection throw me", expected.what());
    }
}

